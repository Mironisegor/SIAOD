//ЮФУ ИКТИБ МОП ЭВМ
//ПИОТА
//Домашнее задание 1
//КТбо 1-6 Миронов Егор
//16.03.2024

#include <iostream>
#include <string>
#include <utility>
#include <map>

using namespace std;

//Функция для реализации обработки одного символа входного слова
string automat(char num, string condition, map <pair <string, char>, string> table);

//Фунция для проверки на коректность введенного числа
bool isValidInput(string word);

//Инициализация таблицы переходов
map <pair <string, char>, string> init();

int main() {
    setlocale(LC_ALL, "Russian");
    string chain;
    do {
        cout << "Введите входное число: ";
        cin >> chain;

        if (!isValidInput(chain)) {
            cout << "Ошибка: введенное число должно содержать только цифры '0' и '1' и '2'\n";
            int choice;
            cout << "Введите '1', если хотите попробовать снова, иначе '0': ";
            cin >> choice;
            if (choice != 1) {
                return 0;
            }
        }
        else {
            break;
        }
    } while (true);
    if (chain == " ") {
        return 0;
    }

    map <pair <string, char>, string> table = init();

    string condition = "S";
    for (int i = 0; i < chain.size(); i++) {
        if (i != chain.size() - 1) {
            string newCondition = automat(chain[i], condition, table);
            cout << chain[i] << ": " << condition << " -> " << newCondition << endl;
            condition = newCondition;
        }
        else {
            string newCondition = automat(chain[i], condition, table);
            cout << chain[i] << ": " << condition << " -> " << newCondition;
            condition = newCondition;
        }
    }
    if (condition != "S0" && condition != "O0") {
        cout << " - Yes" << endl;
    }
    else {
        cout << " - N0" << endl;
    }

    do {
        cout << "Введите '1', если хотите ввести новую цепочку, иначе '0': ";
        int sym;
        cin >> sym;
        if (sym) {
            do {
                cout << "Введите входное число: ";
                cin >> chain;

                if (!isValidInput(chain)) {
                    cout << "Ошибка: введенное число должно содержать только цифры '0' и '1' и '2'\n";
                    int choice;
                    cout << "Введите '1', если хотите попробовать снова, иначе '0': ";
                    cin >> choice;
                    if (choice != 1) {
                        return 0;
                    }
                }
                else {
                    break;
                }
            } while (true);
            if (chain == " ") {
                return 0;
            }
            condition = "S";
            for (int i = 0; i < chain.size(); i++) {
                if (i != chain.size() - 1) {
                    string newCondition = automat(chain[i], condition, table);
                    cout << chain[i] << ": " << condition << " -> " << newCondition << endl;
                    condition = newCondition;
                }
                else {
                    string newCondition = automat(chain[i], condition, table);
                    cout << chain[i] << ": " << condition << " -> " << newCondition;
                    condition = newCondition;
                }
            }
            if (condition != "S0" && condition != "O0") {
                cout << " - Yes" << endl;
            }
            else {
                cout << " - N0" << endl;
            }
        }
        else {
            return 0;
        }
    } while (true);

    return 0;
}

map <pair <string, char>, string> init() {
    map <pair <string, char>, string> table;

    //Condition S
    table[make_pair("S", '0')] = "O0";
    table[make_pair("S", '1')] = "O1";
    table[make_pair("S", '2')] = "O2";
    //Condition O0
    table[make_pair("O0", '0')] = "O0";
    table[make_pair("O0", '1')] = "O1";
    table[make_pair("O0", '2')] = "O2";
    //Condition O1
    table[make_pair("O1", '0')] = "O10";
    table[make_pair("O1", '1')] = "O0";
    table[make_pair("O1", '2')] = "O1";
    //Condition O2
    table[make_pair("O2", '0')] = "O9";
    table[make_pair("O2", '1')] = "O10";
    table[make_pair("O2", '2')] = "O0";
    //Condition O3
    table[make_pair("O3", '0')] = "O8";
    table[make_pair("O3", '1')] = "O9";
    table[make_pair("O3", '2')] = "O10";
    //Condition O4
    table[make_pair("O4", '0')] = "O7";
    table[make_pair("O4", '1')] = "O8";
    table[make_pair("O4", '2')] = "O9";
    //Condition O5
    table[make_pair("O5", '0')] = "O6";
    table[make_pair("O5", '1')] = "O7";
    table[make_pair("O5", '2')] = "O8";
    //Condition O6
    table[make_pair("O6", '0')] = "O5";
    table[make_pair("O6", '1')] = "O6";
    table[make_pair("O6", '2')] = "O7";
    //Condition O7
    table[make_pair("O7", '0')] = "O4";
    table[make_pair("O7", '1')] = "O5";
    table[make_pair("O7", '2')] = "O6";
    //Condition O8
    table[make_pair("O8", '0')] = "O3";
    table[make_pair("O8", '1')] = "O4";
    table[make_pair("O8", '2')] = "O5";
    //Condition O9
    table[make_pair("O9", '0')] = "O2";
    table[make_pair("O9", '1')] = "O3";
    table[make_pair("O9", '2')] = "O4";
    //Condition O10
    table[make_pair("O10", '0')] = "O1";
    table[make_pair("O10", '1')] = "O2";
    table[make_pair("O10", '2')] = "O3";

    return table;
}

bool isValidInput(string word) {
    for (char ch : word) {
        if (ch != '0' && ch != '1' && ch != '2') {
            return false;
        }
    }
    return true;
}

string automat(char num, string condition, map <pair <string, char>, string> table) {

    auto newCondition = table.find(make_pair(condition, num));

    return (*newCondition).second;
}
