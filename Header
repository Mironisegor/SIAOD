#pragma once
#ifndef HEADER_H
#define HEADER_H

#include <string>
#include <vector>
#include <set>

using namespace std;

/**
 * @brief Структура для представления переходов машины Тьюринга.
 */
typedef struct Transition {
    string nowCondition = "N"; ///< Текущее состояние.
    char nowSym = 'N';         ///< Текущий символ.
    char toSym = 'N';          ///< Символ для замены.
    char direction = 'N';      ///< Направление движения ('<' - влево  или '>' - вправо).
    string toCondition = "N";  ///< Состояние для перехода.
} Transition;

/**
 * @brief Проверяет входную строку на соответствие допустимому алфавиту.
 *
 * @param str Входная строка.
 * @param alf Допустимый алфавит.
 * @return true Если в строке есть символы, не входящие в алфавит.
 * @return false Если все символы строки принадлежат алфавиту.
 */
extern "C" __declspec(dllexport) bool checkup(string str, set<char>&alf);

/**
 * @brief Добавляет пробелы в начале и в конце строки, если их нет.
 *
 * @param str Ссылка на входную строку.
 * @return string Измененная строка.
 */
extern "C" __declspec(dllexport) string addsymbols(string & str);

/**
 * @brief Инициализирует таблицу переходов для машины Тьюринга.
 *
 * @param table Ссылка на таблицу переходов.
 * @return true Если файл не удалось открыть.
 * @return false Если инициализация прошла успешно.
 */
extern "C" __declspec(dllexport) bool init(vector<Transition>&table);

/**
 * @brief Выполняет алгоритм машины Тьюринга на входной строке.
 *
 * @param str Ссылка на входную строку.
 * @param table Ссылка на таблицу переходов.
 */
extern "C" __declspec(dllexport) void turing(string & str, vector<Transition>&table);

/**
 * @brief Устанавливает цвет текста в консоли.
 *
 * @param color Код цвета.
 */
extern "C" __declspec(dllexport) void setColor(int color);

#endif // HEADER_H
